<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sky</title>
  <subtitle>sky</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-27T14:12:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>席江平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fastjson序列化关于get方法</title>
    <link href="http://yoursite.com/2017/09/27/fastjson%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%B3%E4%BA%8Eget%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/09/27/fastjson序列化关于get方法/</id>
    <published>2017-09-27T12:55:55.000Z</published>
    <updated>2017-09-27T14:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastjson-序列化关于get问题"><a href="#fastjson-序列化关于get问题" class="headerlink" title="fastjson 序列化关于get问题"></a>fastjson 序列化关于get问题</h1><p>@(get)[typeutil|ASMSerializerFactory|SerializeConfig]</p>
<p><strong>fastjson</strong>是一个高性能的java序列化工具，通常打日志或者序列化json都会使用到。昨天在开发过程中遇到一个问题，一个bean对象在序列化字符串之后里面的一个枚举属性被改变了。之后就跟踪看了一下源码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">SerializeWriter out = <span class="keyword">new</span> SerializeWriter(<span class="keyword">null</span>, defaultFeatures, features);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            JSONSerializer serializer = <span class="keyword">new</span> JSONSerializer(out, config);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (dateFormat != <span class="keyword">null</span> &amp;&amp; dateFormat.length() != <span class="number">0</span>) &#123;</div><div class="line">                serializer.setDateFormat(dateFormat);</div><div class="line">                serializer.config(SerializerFeature.WriteDateUseDateFormat, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (SerializeFilter filter : filters) &#123;</div><div class="line">                    serializer.addFilter(filter);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            serializer.write(object);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> out.toString();</div></pre></td></tr></table></figure>
<p>这里面先生成了一个SerializeWriter对象，再用它生成了 jsonserializer的类，然后再写对象。来看看这个write方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public final void write(Object object) &#123;</div><div class="line">      if (object == null) &#123;</div><div class="line">          out.writeNull();</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Class&lt;?&gt; clazz = object.getClass();</div><div class="line">      ObjectSerializer writer = getObjectWriter(clazz);</div><div class="line"></div><div class="line">      try &#123;</div><div class="line">          writer.write(this, object, null, null, 0);</div><div class="line">      &#125; catch (IOException e) &#123;</div><div class="line">          throw new JSONException(e.getMessage(), e);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法里主要是 生成 ObjectSerializer 对象，然后再写，我们追踪生成ObjectSerializer对象的方法</p>
<p>JSONSerializer  328行<br>SerializeConfig 377行  380行 444行  123行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private final ObjectSerializer createJavaBeanSerializer(Class&lt;?&gt; clazz) &#123;</div><div class="line">	    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);</div><div class="line">	    if (beanInfo.fields.length == 0 &amp;&amp; Iterable.class.isAssignableFrom(clazz)) &#123;</div><div class="line">	        return MiscCodec.instance;</div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    return createJavaBeanSerializer(beanInfo);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>TypeUtils.buildBeanInfo()方法里面要构造要序列化的bean的信息。截取里面部分关键代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询</div><div class="line">      Map&lt;String, Field&gt; fieldCacheMap = new HashMap&lt;String, Field&gt;();</div><div class="line">      ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);</div><div class="line"></div><div class="line">      List&lt;FieldInfo&gt; fieldInfoList = computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, false, propertyNamingStrategy);</div><div class="line">      FieldInfo[] fields = new FieldInfo[fieldInfoList.size()];</div><div class="line">      fieldInfoList.toArray(fields);</div><div class="line">      </div><div class="line">      String[] orders = null;</div></pre></td></tr></table></figure></p>
<p>computeGetters()方法会获取bean里面所有的字段。<br>再截取里面部分代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line">if (methodName.startsWith(&quot;get&quot;)) &#123;</div><div class="line">               if (methodName.length() &lt; 4) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               if (methodName.equals(&quot;getClass&quot;)) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               if (methodName.equals(&quot;getDeclaringClass&quot;) &amp;&amp; clazz.isEnum()) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               char c3 = methodName.charAt(3);</div><div class="line"></div><div class="line">               String propertyName;</div><div class="line">               if (Character.isUpperCase(c3) //</div><div class="line">                   || c3 &gt; 512 // for unicode method name</div><div class="line">               ) &#123;</div><div class="line">                  if (compatibleWithJavaBean) &#123;</div><div class="line">                       propertyName = decapitalize(methodName.substring(3));</div><div class="line">                   &#125; else &#123;</div><div class="line">                       propertyName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);</div><div class="line">                   &#125;</div><div class="line">                   propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName,  propertyName,3); </div><div class="line">               &#125; else if (c3 == &apos;_&apos;) &#123;</div><div class="line">                   propertyName = methodName.substring(4);</div><div class="line">               &#125; else if (c3 == &apos;f&apos;) &#123;</div><div class="line">                   propertyName = methodName.substring(3);</div><div class="line">               &#125; else if (methodName.length() &gt;= 5 &amp;&amp; Character.isUpperCase(methodName.charAt(4))) &#123;</div><div class="line">                   propertyName = decapitalize(methodName.substring(3));</div><div class="line">               &#125; else &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               boolean ignore = isJSONTypeIgnore(clazz, propertyName);</div><div class="line"></div><div class="line">               if (ignore) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line">               //假如bean的field很多的情况一下，轮询时将大大降低效率</div><div class="line">               Field field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);</div><div class="line">               </div><div class="line">               if (field == null &amp;&amp; propertyName.length() &gt; 1) &#123;</div><div class="line">                   char ch = propertyName.charAt(1);</div><div class="line">                   if (ch &gt;= &apos;A&apos; &amp;&amp; ch &lt;= &apos;Z&apos;) &#123;</div><div class="line">                       String javaBeanCompatiblePropertyName = decapitalize(methodName.substring(3));</div><div class="line">                       field = ParserConfig.getFieldFromCache(javaBeanCompatiblePropertyName, fieldCacheMap);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               </div><div class="line">               JSONField fieldAnnotation = null;</div><div class="line">               if (field != null) &#123;</div><div class="line">                   fieldAnnotation = field.getAnnotation(JSONField.class);</div><div class="line"></div><div class="line">                   if (fieldAnnotation != null) &#123;</div><div class="line">                       if (!fieldAnnotation.serialize()) &#123;</div><div class="line">                           continue;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       ordinal = fieldAnnotation.ordinal();</div><div class="line">                       serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</div><div class="line">                       parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</div><div class="line"></div><div class="line">                       if (fieldAnnotation.name().length() != 0) &#123;</div><div class="line">                           propertyName = fieldAnnotation.name();</div><div class="line"></div><div class="line">                           if (aliasMap != null) &#123;</div><div class="line">                               propertyName = aliasMap.get(propertyName);</div><div class="line">                               if (propertyName == null) &#123;</div><div class="line">                                   continue;</div><div class="line">                               &#125;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       if (fieldAnnotation.label().length() != 0) &#123;</div><div class="line">                           label = fieldAnnotation.label();</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               if (aliasMap != null) &#123;</div><div class="line">                   propertyName = aliasMap.get(propertyName);</div><div class="line">                   if (propertyName == null) &#123;</div><div class="line">                       continue;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               </div><div class="line">               if (propertyNamingStrategy != null) &#123;</div><div class="line">                   propertyName = propertyNamingStrategy.translate(propertyName);</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               FieldInfo fieldInfo = new FieldInfo(propertyName, method, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,</div><div class="line">                                                   annotation, fieldAnnotation, label);</div><div class="line">               fieldInfoMap.put(propertyName, fieldInfo);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           if (methodName.startsWith(&quot;is&quot;)) &#123;</div><div class="line">               if (methodName.length() &lt; 3) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               if (method.getReturnType() != Boolean.TYPE</div><div class="line">                       &amp;&amp; method.getReturnType() != Boolean.class) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               char c2 = methodName.charAt(2);</div><div class="line"></div><div class="line">               String propertyName;</div><div class="line">               if (Character.isUpperCase(c2)) &#123;</div><div class="line">                   if (compatibleWithJavaBean) &#123;</div><div class="line">                       propertyName = decapitalize(methodName.substring(2));</div><div class="line">                   &#125; else &#123;</div><div class="line">                       propertyName = Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);</div><div class="line">                   &#125;</div><div class="line">                   propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName,  propertyName,2); </div><div class="line">               &#125; else if (c2 == &apos;_&apos;) &#123;</div><div class="line">                   propertyName = methodName.substring(3);</div><div class="line">               &#125; else if (c2 == &apos;f&apos;) &#123;</div><div class="line">                   propertyName = methodName.substring(2);</div><div class="line">               &#125; else &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               Field field = ParserConfig.getFieldFromCache(propertyName,fieldCacheMap);</div><div class="line"></div><div class="line">               if (field == null) &#123;</div><div class="line">                   field = ParserConfig.getFieldFromCache(methodName,fieldCacheMap); </div><div class="line">               &#125;</div><div class="line"></div><div class="line">               JSONField fieldAnnotation = null;</div><div class="line">               if (field != null) &#123;</div><div class="line">                   fieldAnnotation = field.getAnnotation(JSONField.class);</div><div class="line"></div><div class="line">                   if (fieldAnnotation != null) &#123;</div><div class="line">                       if (!fieldAnnotation.serialize()) &#123;</div><div class="line">                           continue;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       ordinal = fieldAnnotation.ordinal();</div><div class="line">                       serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</div><div class="line">                       parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</div><div class="line">                       </div><div class="line">                       if (fieldAnnotation.name().length() != 0) &#123;</div><div class="line">                           propertyName = fieldAnnotation.name();</div><div class="line"></div><div class="line">                           if (aliasMap != null) &#123;</div><div class="line">                               propertyName = aliasMap.get(propertyName);</div><div class="line">                               if (propertyName == null) &#123;</div><div class="line">                                   continue;</div><div class="line">                               &#125;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       if (fieldAnnotation.label().length() != 0) &#123;</div><div class="line">                           label = fieldAnnotation.label();</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               if (aliasMap != null) &#123;</div><div class="line">                   propertyName = aliasMap.get(propertyName);</div><div class="line">                   if (propertyName == null) &#123;</div><div class="line">                       continue;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               </div><div class="line">               if (propertyNamingStrategy != null) &#123;</div><div class="line">                   propertyName = propertyNamingStrategy.translate(propertyName);</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               //优先选择get</div><div class="line">               if (fieldInfoMap.containsKey(propertyName)) &#123;</div><div class="line">                   continue;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               FieldInfo fieldInfo = new FieldInfo(propertyName, method, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,</div><div class="line">                                                   annotation, fieldAnnotation, label);</div><div class="line">               fieldInfoMap.put(propertyName, fieldInfo);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>通过反射获取类的所有方法，并判断以get、is开头的方法。这个方法会假设 以get 、is 开头并符合一定规范的方法名后半部门上类的字段。 然后通过注解再进行一次过滤。如果bean对象中有这样的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class  Apple&#123;</div><div class="line">  private int a;</div><div class="line"> public void getOrange()&#123;</div><div class="line">  this.a=10</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么 orange会被误以为是这个bean的filed。之后在write()方法的时候会调用所有filed的 get方法。那么 如果get方法里面有赋值操作，属性将会被重写。  bean对象在写get方法的时候一定要注意规范。要不然不注意的时候 对象就会被改动。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fastjson-序列化关于get问题&quot;&gt;&lt;a href=&quot;#fastjson-序列化关于get问题&quot; class=&quot;headerlink&quot; title=&quot;fastjson 序列化关于get问题&quot;&gt;&lt;/a&gt;fastjson 序列化关于get问题&lt;/h1&gt;&lt;p&gt;@(
    
    </summary>
    
    
      <category term="fastjson" scheme="http://yoursite.com/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>“spring自定义标签”</title>
    <link href="http://yoursite.com/2017/09/11/spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2017/09/11/spring自定义标签/</id>
    <published>2017-09-11T14:01:53.000Z</published>
    <updated>2017-09-11T14:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>当Spring拿到一个元素时首先要做的是根据命名空间进行解析，如果是默认的命名空间，则使用==parseDefaultElement==方法进行元素解析，否则使用==parseCustom Element==方法进行解析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) &#123;</div><div class="line">    if (delegate.isDefaultNamespace(root)) &#123;</div><div class="line">        NodeList nl = root.getChildNodes();</div><div class="line">        for (int i = 0; i &lt; nl.getLength(); i++) &#123;</div><div class="line">            Node node = nl.item(i);</div><div class="line">            if (node instanceof Element) &#123;</div><div class="line">                Element ele = (Element) node;</div><div class="line">                if (delegate.isDefaultNamespace(ele)) &#123;</div><div class="line">                    parseDefaultElement(ele, delegate);</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    delegate.parseCustomElement(ele);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        delegate.parseCustomElement(root);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) &#123;</div><div class="line">    String namespaceUri = getNamespaceURI(ele);</div><div class="line">    NamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</div><div class="line">    if (handler == null) &#123;</div><div class="line">        error(&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot; + namespaceUri + &quot;]&quot;, ele);</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    return handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义标签的使用"><a href="#自定义标签的使用" class="headerlink" title="自定义标签的使用"></a>自定义标签的使用</h3><p>扩展Spring自定义标签配置大致需要以下几个步骤（前提是要把Spring的Core包加入项目中）。</p>
<ol>
<li>创建一个需要扩展的组件。</li>
<li>定义一个XSD文件描述组件内容。</li>
<li>创建一个文件，实现BeanDefinitionParser接口，用来解析XSD文件中的定义和组件定义。</li>
<li>创建一个Handler文件，扩展自NamespaceHandlerSupport，目的是将组件注册到Spring容器。</li>
<li>编写Spring.handlers和Spring.schemas文件。</li>
</ol>
<p>第一步：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class TestBean &#123;</div><div class="line">    private String name;</div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;TestBean&#123;&quot; +</div><div class="line">                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二步：<br>建立xsd 文件，用来校验我们的自定义标签的有效性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;  </div><div class="line">&lt;xsd:schema xmlns=&quot;http://code.alibabatech.com/schema/dubbo&quot;  </div><div class="line">        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;   </div><div class="line">        targetNamespace=&quot;http://code.alibabatech.com/schema/dubbo&quot;&gt;  </div><div class="line">  </div><div class="line">        &lt;xsd:element name=&quot;custom&quot; type=&quot;customType&quot;&gt;  </div><div class="line">        &lt;/xsd:element&gt;  </div><div class="line">        &lt;xsd:complexType name=&quot;customType&quot;&gt;  </div><div class="line">                &lt;xsd:attribute name=&quot;id&quot; type=&quot;xsd:ID&quot;&gt;  </div><div class="line">                &lt;/xsd:attribute&gt;  </div><div class="line">                &lt;xsd:attribute name=&quot;name&quot; type=&quot;xsd:string&quot;&gt;  </div><div class="line">                &lt;/xsd:attribute&gt;  </div><div class="line">        &lt;/xsd:complexType&gt;  </div><div class="line">  </div><div class="line">&lt;/xsd:schema&gt;</div></pre></td></tr></table></figure>
<p>第三步：<br>建立解析自定义标签的类 TestCustomBeanDefinitionParser<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import org.springframework.beans.factory.config.BeanDefinition;  </div><div class="line">import org.springframework.beans.factory.support.RootBeanDefinition;  </div><div class="line">import org.springframework.beans.factory.xml.BeanDefinitionParser;  </div><div class="line">import org.springframework.beans.factory.xml.ParserContext;  </div><div class="line">import org.w3c.dom.Element;  </div><div class="line">  </div><div class="line">public class TestCustomBeanDefinitionParser implements BeanDefinitionParser &#123;  </div><div class="line">  </div><div class="line">    public BeanDefinition parse(Element element, ParserContext parserContext) &#123;  </div><div class="line">  </div><div class="line">        String id = element.getAttribute(&quot;id&quot;);  </div><div class="line">        String name = element.getAttribute(&quot;name&quot;);  </div><div class="line">  </div><div class="line">        RootBeanDefinition beanDefinition = new RootBeanDefinition();  </div><div class="line">        beanDefinition.setBeanClass(TestBean.class);  </div><div class="line">        beanDefinition.getPropertyValues().addPropertyValue(&quot;name&quot;, name);  </div><div class="line">        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);  </div><div class="line">  </div><div class="line">        return beanDefinition;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第四步：<br>建立处理的类 TestNamespaceHandler，这个类主要用来调用解释类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import org.springframework.beans.factory.xml.NamespaceHandlerSupport;  </div><div class="line">public class TestNamespaceHandler extends NamespaceHandlerSupport &#123;  </div><div class="line">    public void init() &#123;  </div><div class="line">        registerBeanDefinitionParser(&quot;custom&quot;, new TestCustomBeanDefinitionParser());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第五步：</p>
<p>spring读取我们自定义的schema和handlers默认是根据spring.handlers和spring.schemas来读取的，这两个文件默认要放在META-INF下</p>
<p>spring.handlers:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http\://code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler</div><div class="line">spring.schemas:</div><div class="line">http\://code.alibabatech.com/schema/dubbo/dubbo.xsd=META-INF/dubbo.xsd</div></pre></td></tr></table></figure></p>
<p>测试用例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </div><div class="line">    xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;  </div><div class="line">    xsi:schemaLocation=&quot;  </div><div class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </div><div class="line">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;  </div><div class="line">          </div><div class="line">        &lt;dubbo:custom id=&quot;testCustom&quot; name=&quot;this is a test custom tag&quot; /&gt;  </div><div class="line">&lt;/beans&gt;  </div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;  </div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;  </div><div class="line">  </div><div class="line">public class Main &#123;  </div><div class="line">  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        String xml = &quot;classpath:test.xml&quot;;  </div><div class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; xml &#125;);  </div><div class="line">        System.out.println(context.getBean(&quot;testCustom&quot;));  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">上例输出为：</div><div class="line">TestBean ｛name=this is a test custom tag｝</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当Spring拿到一个元素时首先要做的是根据命名空间进行解析，如果是默认的命名空间，则使用==parseDefaultElement==方法进行元素解析，否则使用==parseCustom Element==方法进行解析。&lt;/p&gt;
&lt;figure class=&quot;highli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>“HttpServletResponse对象”</title>
    <link href="http://yoursite.com/2017/09/11/HttpServletResponse%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/09/11/HttpServletResponse对象/</id>
    <published>2017-09-11T13:48:54.000Z</published>
    <updated>2017-09-11T13:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h1><p><strong>HttpServletResponse对象代表服务器的响应。这个对象中封装了向客户端发送数据、发送响应头，发送响应状态码的方法。查看HttpServletResponse的API，可以看到这些相关的方法</strong></p>
<p>服务器向客户端响应数据的两种方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">1. getOutputstream()</div><div class="line">2. getWriter()</div></pre></td></tr></table></figure>
<hr>
<p>客户端请求数据与服务端响应数据如果相互格式不对，则会出现406错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/produces&quot;, produces = &quot;application/json&quot;)：</div></pre></td></tr></table></figure>
<p><strong>表示将功能处理方法将生产json格式的数据，此时根据请求头中的Accept进行匹配，如请求头“Accept:application/json”时即可匹配;</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/produces&quot;, produces = &quot;application/xml&quot;)：</div></pre></td></tr></table></figure></p>
<p><strong>表示将功能处理方法将生产xml格式的数据，此时根据请求头中的Accept进行匹配，如请求头“Accept:application/xml”时即可匹配。</strong></p>
<p><strong>前端代码示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    dataType:&quot;json&quot;</div><div class="line">    type: &quot;post&quot;,</div><div class="line">    success: function (data) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h3><blockquote>
<p>  类型： String </p>
</blockquote>
<p>  预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:</p>
<ul>
<li>“xml”: 返回 XML 文档，可用 jQuery 处理。</li>
<li>“html”: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</li>
<li>“script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）</li>
<li>“json”: 返回 JSON 数据 。</li>
<li>“jsonp”: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</li>
<li>“text”: 返回纯文本字符串</li>
</ul>
<p><strong>还可以自定义 ==Accept== 使用具体参考下面文</strong>章</p>
<h3 id="jQuery-ajax-如何设置-Headers-中的-Accept"><a href="#jQuery-ajax-如何设置-Headers-中的-Accept" class="headerlink" title="jQuery.ajax() 如何设置 Headers 中的 Accept"></a><a href="http://www.cnblogs.com/xwgli/p/4457971.html" target="_blank" rel="external">jQuery.ajax() 如何设置 Headers 中的 Accept</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HttpServletResponse对象&quot;&gt;&lt;a href=&quot;#HttpServletResponse对象&quot; class=&quot;headerlink&quot; title=&quot;HttpServletResponse对象&quot;&gt;&lt;/a&gt;HttpServletResponse对象&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SprinMVC接受参数以及处理流程</title>
    <link href="http://yoursite.com/2017/09/11/SprinMVC%E6%8E%A5%E5%8F%97%E5%8F%82%E6%95%B0%E4%BB%A5%E5%8F%8A%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/09/11/SprinMVC接受参数以及处理流程/</id>
    <published>2017-09-11T13:47:29.000Z</published>
    <updated>2017-09-11T13:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC接受参数以及处理方式"><a href="#SpringMVC接受参数以及处理方式" class="headerlink" title="SpringMVC接受参数以及处理方式"></a>SpringMVC接受参数以及处理方式</h1><p>Servlet中的输入参数为都是string类型，而<br><strong>==spring mvc通过data bind机制==</strong>将这些string 类型的输入参数转换为相应的command object（根据view和controller之间传输数据的具体逻辑，也可称为model attributes, domain model objects）。在这个转换过程中，spring实际是先利用java.beans.PropertyEditor中的 setAdText方法来把string格式的输入转换为bean属性，<br>亦可通过继承java.beans.PropertyEditorSupport来实现自定义的PropertyEditors,具体实现方式可参考spring reference 3.0.5 第 5.4节中的 Registering additional custom PropertyEditors部分。<br>自定义完毕propertyEditor后，有以下几种方式来注册自定义的customer propertyEditor. </p>
<p>2:利用@<strong>==InitBinder来注册customer==</strong> propertyEditor<br>这个在之前的笔记中已经介绍过了，即在controller类中增加一个使用@InitBinder标注的方法，在其中注册customer Editor </p>
<h3 id="date对象-的特殊处理"><a href="#date对象-的特殊处理" class="headerlink" title="- date对象 的特殊处理"></a>- date对象 的特殊处理</h3><blockquote>
<p>  <strong>==在contorller里加上这个方法==</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@InitBinder  </div><div class="line">protected  void initBinder(WebDataBinder binder) &#123;  </div><div class="line">    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </div><div class="line">    binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> <strong>==在接受参数的类的字段上加注解== 需要joda 包</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)  //取日期时使用  </div><div class="line">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)//存日期时使用  </div><div class="line">private Date startTime;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="多个对象"><a href="#多个对象" class="headerlink" title="- 多个对象"></a>- 多个对象</h3><ol>
<li><strong>第1种方法：==表单提交，以字段数组接收==</strong></li>
<li><strong>第2种方法：==表单提交，以BeanListModel接收==</strong></li>
<li><strong>第3种方法：==将Json对象序列化成Json字符串提交，以List接收==</strong></li>
<li><strong>第4种方法：==将表单对象序列化成Json字符串提交，以List接收==</strong></li>
</ol>
<p>实体类如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line"></div><div class="line">    private Integer id;</div><div class="line">    private String name;</div><div class="line">    private String pwd;</div><div class="line">｝</div></pre></td></tr></table></figure>
<ol>
<li><strong>第一种方法</strong>：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/user/submitUserList_1&quot; method=&quot;post&quot;&gt;</div><div class="line">        ID:&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;&lt;br/&gt;</div><div class="line">        Username:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br/&gt;</div><div class="line">        Password:&lt;input type=&quot;text&quot; name=&quot;pwd&quot;&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line"></div><div class="line">        ID:&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;&lt;br/&gt;</div><div class="line">        Username:&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br/&gt;</div><div class="line">        Password:&lt;input type=&quot;text&quot; name=&quot;pwd&quot;&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;</div><div class="line">    &lt;/form&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/submitUserList_1&quot;, method =&#123;RequestMethod.POST&#125;)</div><div class="line">    @ResponseBody</div><div class="line">    public String submitUserList_1(HttpServletResponse response,Integer[] id, String[] name, String[] pwd)</div><div class="line">                            throws Exception&#123;</div><div class="line">     ｝</div></pre></td></tr></table></figure>
<p>2.<strong>第二种方法</strong></p>
<p>前端代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/user/submitUserList_2&quot; method=&quot;post&quot;&gt;</div><div class="line">    ID:&lt;input type=&quot;text&quot; name=&quot;users[0].id&quot;&gt;&lt;br/&gt;</div><div class="line">    Username:&lt;input type=&quot;text&quot; name=&quot;users[0].name&quot;&gt;&lt;br/&gt;</div><div class="line">    Password:&lt;input type=&quot;text&quot; name=&quot;users[0].pwd&quot;&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line"></div><div class="line">    ID:&lt;input type=&quot;text&quot; name=&quot;users[2].id&quot;&gt;&lt;br/&gt;</div><div class="line">    Username:&lt;input type=&quot;text&quot; name=&quot;users[2].name&quot;&gt;&lt;br/&gt;</div><div class="line">    Password:&lt;input type=&quot;text&quot; name=&quot;users[2].pwd&quot;&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>还要封装一个User的容器类UserModel：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class UserModel &#123;</div><div class="line">    private List&lt;User&gt; users;</div><div class="line"></div><div class="line">    public List&lt;User&gt; getUsers() &#123;</div><div class="line">        return users;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUsers(List&lt;User&gt; users) &#123;</div><div class="line">        this.users = users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/submitUserList_2&quot;, method =&#123;RequestMethod.POST&#125;)</div><div class="line">@ResponseBody</div><div class="line">public String submitUserList_2(UserModel users)</div><div class="line">        throws Exception&#123;</div><div class="line">｝</div></pre></td></tr></table></figure>
<ol>
<li><strong>第三种</strong></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;submitUserList_3&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">    &lt;script language=&quot;JavaScript&quot; src=&quot;/js/jquery.min.js&quot; &gt;&lt;/script&gt;</div><div class="line">    &lt;script language=&quot;JavaScript&quot; src=&quot;/js/jquery.json.min.js&quot; &gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript&quot;&gt;</div><div class="line">        function submitUserList_3() &#123;alert(&quot;ok&quot;);</div><div class="line">            var customerArray = new Array();</div><div class="line">            customerArray.push(&#123;id: &quot;1&quot;, name: &quot;李四&quot;, pwd: &quot;123&quot;&#125;);</div><div class="line">            customerArray.push(&#123;id: &quot;2&quot;, name: &quot;张三&quot;, pwd: &quot;332&quot;&#125;);</div><div class="line">            $.ajax(&#123;</div><div class="line">                url: &quot;/user/submitUserList_3&quot;,</div><div class="line">                type: &quot;POST&quot;,</div><div class="line">                contentType : &apos;application/json;charset=utf-8&apos;, //设置请求头信息</div><div class="line">                dataType:&quot;json&quot;,</div><div class="line">                //data: JSON.stringify(customerArray),    //将Json对象序列化成Json字符串，JSON.stringify()原生态方法</div><div class="line">                data: $.toJSON(customerArray),            //将Json对象序列化成Json字符串，toJSON()需要引用jquery.json.min.js</div><div class="line">                success: function(data)&#123;</div><div class="line">                    alert(data);</div><div class="line">                &#125;,</div><div class="line">                error: function(res)&#123;</div><div class="line">                    alert(res.responseText);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/submitUserList_3&quot;, method =&#123;RequestMethod.POST&#125;)</div><div class="line">@ResponseBody</div><div class="line">public String submitUserList_3(@RequestBody List&lt;User&gt; users)</div><div class="line">        throws Exception&#123;</div><div class="line">    String result = &quot;&quot;;</div><div class="line">    if(users == null || users.size() &lt;= 0)&#123; return &quot;No any ID.中文&quot;; &#125;</div><div class="line">    result = this.showUserList(users);</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><strong>第四种方法</strong></p>
<p>第四种方法和第三种方法类似，只是多一个把表单数据转换为json多处理</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;submitUserList_4&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">    &lt;script language=&quot;JavaScript&quot; src=&quot;/js/jquery.min.js&quot; &gt;&lt;/script&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript&quot;&gt;</div><div class="line">        //将表单序列化成json格式的数据(但不适用于含有控件的表单，例如复选框、多选的select)</div><div class="line">        (function($)&#123;</div><div class="line">            $.fn.serializeJson = function()&#123;</div><div class="line">                var jsonData1 = &#123;&#125;;</div><div class="line">                var serializeArray = this.serializeArray();</div><div class="line">                // 先转换成&#123;&quot;id&quot;: [&quot;12&quot;,&quot;14&quot;], &quot;name&quot;: [&quot;aaa&quot;,&quot;bbb&quot;], &quot;pwd&quot;:[&quot;pwd1&quot;,&quot;pwd2&quot;]&#125;这种形式</div><div class="line">                $(serializeArray).each(function () &#123;</div><div class="line">                    if (jsonData1[this.name]) &#123;</div><div class="line">                        if ($.isArray(jsonData1[this.name])) &#123;</div><div class="line">                            jsonData1[this.name].push(this.value);</div><div class="line">                        &#125; else &#123;</div><div class="line">                            jsonData1[this.name] = [jsonData1[this.name], this.value];</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        jsonData1[this.name] = this.value;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                // 再转成[&#123;&quot;id&quot;: &quot;12&quot;, &quot;name&quot;: &quot;aaa&quot;, &quot;pwd&quot;:&quot;pwd1&quot;&#125;,&#123;&quot;id&quot;: &quot;14&quot;, &quot;name&quot;: &quot;bb&quot;, &quot;pwd&quot;:&quot;pwd2&quot;&#125;]的形式</div><div class="line">                var vCount = 0;</div><div class="line">                // 计算json内部的数组最大长度</div><div class="line">                for(var item in jsonData1)&#123;</div><div class="line">                    var tmp = $.isArray(jsonData1[item]) ? jsonData1[item].length : 1;</div><div class="line">                    vCount = (tmp &gt; vCount) ? tmp : vCount;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                if(vCount &gt; 1) &#123;</div><div class="line">                    var jsonData2 = new Array();</div><div class="line">                    for(var i = 0; i &lt; vCount; i++)&#123;</div><div class="line">                        var jsonObj = &#123;&#125;;</div><div class="line">                        for(var item in jsonData1) &#123;</div><div class="line">                            jsonObj[item] = jsonData1[item][i];</div><div class="line">                        &#125;</div><div class="line">                        jsonData2.push(jsonObj);</div><div class="line">                    &#125;</div><div class="line">                    return JSON.stringify(jsonData2);</div><div class="line">                &#125;else&#123;</div><div class="line">                    return &quot;[&quot; + JSON.stringify(jsonData1) + &quot;]&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;)(jQuery);</div></pre></td></tr></table></figure>
<h3 id="总结-："><a href="#总结-：" class="headerlink" title="==总结==："></a>==总结==：</h3><p>第1、2种方法其实都有一个共同的BUG：假如提交三条记录时，前面两条记录的某些字段不填值的话，在SpringMVC里接收不准确了。而且，前2种方法在HMTL中需要给name属性添加[下标]，如果下标有跨度的话（比如第一组控件下标是0,第二组下标是2），那么SpringMVC里其实的是0到2三个对象的，默认下标是1的那个对象全为null值。 容易出错。第3、4种方法最实用</p>
<hr>
<p><strong>@==requestBody或httpEntity中数据的类型转换==</strong><br>Spring MVC中对于requestBody中发送的数据转换不是通过databind来实现，而是使用HttpMessageConverter来实现具体的类型转换。<br>例如，之前提到的json格式的输入，在将json格式的输入转换为具体的model的过程中，spring mvc首先找出request header中的contenttype，再遍历当前所注册的所有的HttpMessageConverter子类， 根据子类中的canRead()方法来决定调用哪个具体的子类来实现对requestBody中的数据的解析。如果当前所注册的httpMessageConverter中都无法解析对应contexttype类型，则抛出HttpMediaTypeNotSupportedException （http 415错误）。<br>那么需要如何注册自定义的messageConverter呢，很不幸，在spring 3.0.5中如果使用annotation-driven的配置方式的话，无法实现自定义的messageConverter的配置，必须老老实实的自己定义AnnotationMethodHandlerAdapter的bean定义，再设置其messageConverters以注册自定义的messageConverter。<br>在3.1版本中，将增加annotation-driven对自定义的messageConverter的支持 (SPR-7504)，具体格式如下<br>1:直接将自定义的propertyEditor放到需要处理的java bean相同的目录下<br>名称和java Bean相同但后面带Editor后缀。<br>例如需要转换的java bean 名为User,则在相同的包中存在UserEditor类可实现customer propertyEditor的自动注册。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;mvc:annotation-driven&gt;  </div><div class="line">    &lt;mvc:message-converters&gt;  </div><div class="line">        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;/&gt;  </div><div class="line">        &lt;bean class=&quot;org.springframework.http.converter.ResourceHttpMessageConverter&quot;/&gt;  </div><div class="line">        &lt;bean class=&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;/&gt;  </div><div class="line">    &lt;/mvc:message-converters&gt;  </div><div class="line">&lt;/mvc:annotation-driven&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC接受参数以及处理方式&quot;&gt;&lt;a href=&quot;#SpringMVC接受参数以及处理方式&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC接受参数以及处理方式&quot;&gt;&lt;/a&gt;SpringMVC接受参数以及处理方式&lt;/h1&gt;&lt;p&gt;Se
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨库分页</title>
    <link href="http://yoursite.com/2017/09/11/%E8%B7%A8%E5%BA%93%E5%88%86%E9%A1%B5/"/>
    <id>http://yoursite.com/2017/09/11/跨库分页/</id>
    <published>2017-09-11T13:44:26.000Z</published>
    <updated>2017-09-11T14:00:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决“跨库分页”这一难题的四种方法："><a href="#解决“跨库分页”这一难题的四种方法：" class="headerlink" title="解决“跨库分页”这一难题的四种方法："></a>解决“跨库分页”这一难题的四种方法：</h1><hr>
<p>方法一：全局视野法<br>（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y<br>（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录<br>这种方法随着翻页的进行，性能越来越低。</p>
<hr>
<p>方法二：业务折衷法-禁止跳页查询<br>（1）用正常的方法取得第一页数据，并得到第一页记录的time_max<br>（2）每次翻页，将order by time offset X limit Y，改写成order by time where time&gt;$time_max limit Y<br>以保证每次只返回一页数据，性能为常量。</p>
<hr>
<p>方法三：业务折衷法-允许模糊数据<br>（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y/N</p>
<hr>
<p>方法四：二次查询法<br>（1）将order by time offset X limit Y，改写成order by time offset X/N limit Y<br>（2）找到最小值time_min<br>（3）between二次查询，order by time between $time_min and $time_i_max<br>（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset<br>（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决“跨库分页”这一难题的四种方法：&quot;&gt;&lt;a href=&quot;#解决“跨库分页”这一难题的四种方法：&quot; class=&quot;headerlink&quot; title=&quot;解决“跨库分页”这一难题的四种方法：&quot;&gt;&lt;/a&gt;解决“跨库分页”这一难题的四种方法：&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;方
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习什么</title>
    <link href="http://yoursite.com/2017/09/09/%E5%AD%A6%E4%B9%A0%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/2017/09/09/学习什么/</id>
    <published>2017-09-09T13:35:36.000Z</published>
    <updated>2017-09-11T14:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>   一个人要学习什么，如果是学生，那么他的老师会告诉他要学习什么。可能不是理想的选择，但起码有了一个选择。如果是一个工作中的人。来到更具体一点的职业来讲，程序员。有前端、后端、数据库、架构师、机器学习、数据挖掘、不同的语言。在面对如此多的选择的时候，一个程序员应该学习什么？<br>   语言大概是大家觉得最简单不用深入考虑的。毕竟程序开发最重要的不是语言。那学前端还是后端，spring还是zookeeper，或者说什么火学什么？有时候选择太多可能也不是一个好事情。<br>   做任何事情都是有目的的。学一个技术目的是为什么？面试（我曾经也是这样），工作中使用，<br>   框架这种东西工作中真正用到的也不多。但是面试中由于大量要求对xxx框架深入理解。一时兴起就开始看框架，坚持不到两天就难以为继。那么学习框架的真正目的是什么？学什么真的很难选择吗？ 我觉得这么几点要注意一下：</p>
<p>   明确学习目标<br>   比如我这个月要学习什么，要达到一个什么样的效果。</p>
<p>   不要贪多，先学好一个东西</p>
<p>   制定好的学习方法<br>    要注重实践</p>
<pre><code> netty 
机器学习 python
</code></pre><p>   提高效率</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   一个人要学习什么，如果是学生，那么他的老师会告诉他要学习什么。可能不是理想的选择，但起码有了一个选择。如果是一个工作中的人。来到更具体一点的职业来讲，程序员。有前端、后端、数据库、架构师、机器学习、数据挖掘、不同的语言。在面对如此多的选择的时候，一个程序员应该学习什么
    
    </summary>
    
    
  </entry>
  
</feed>
